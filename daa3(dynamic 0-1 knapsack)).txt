//A Dynamic Programming based solution for 0-1 Knapsack problem
#include <iostream>

using namespace std;
// A utility function that returns a maximum of two integers
int max(int a, int b) {
  return (a > b) ? a : b;
}
// Returns the maximum value that can be put in a knapsack of capacity W
int knapSack(int W, int wt[], int val[], int n) {
  int i, w;
  int K[n + 1][W + 1];
  // Build table K[][] in bottom up manner
  for (i = 0; i <= n; i++) {
    for (w = 0; w <= W; w++) {
      if (i == 0 || w == 0)
        K[i][w] = 0;
      else if (wt[i - 1] <= w)
        K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
      else
        K[i][w] = K[i - 1][w];
    }
  }
  return K[n][W];
}
int main() {
  cout << "Enter the number of items in a Knapsack:";
  int n, W;
  cin >> n;
  int val[n], wt[n];
  for (int i = 0; i < n; i++) {
    cout << "Enter value and weight for item " << i << ":";
    cin >> val[i];
    cin >> wt[i];
  }
  // int val[] = { 60, 100, 120 };
  // int wt[] = { 10, 20, 30 };
  // int W = 50;
  cout << "Enter the capacity of knapsack";
  cin >> W;
  cout << "Maximum Profit :" << knapSack(W, wt, val, n);
  return 0;
}




//in py


'''
A Dynamic Programming based Python program
for 0-1 Knapsack problem returns the maximum
value that can be put in a knapsack of capacity W

'''
def knapSack(W, wt, val):
  n = len(val)
  dp = [[-1 for _ in range(W + 1)] for _ in range(n + 1)]

  for i in range(n + 1):
    dp[i][0] = 0

  for j in range(W + 1):
      dp[0][j] = 0

  for i in range(1,n+1):
    for j in range(1,W+1):
      v = val[i - 1] # ith item val
      w = wt[i - 1] # ith item wt
      if w<=j:
        includedProfit = v + dp[i-1][j-w]
        excludedProfit = dp[i-1][j]
        dp[i][j] = max(includedProfit, excludedProfit)
      else:
        excludedProfit = dp[i-1][j]
        dp[i][j] = excludedProfit

  return dp[n][W]


# Driver code
val = [10, 20, 30]
wt = [100, 200, 300]
W = 250

print(f'Maximum value we can obtain = {knapSack(W, wt, val)}')
